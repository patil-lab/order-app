package com.prive.ordering.config;import com.prive.ordering.handler.CustomResponseErrorHandler;import okhttp3.ConnectionPool;import okhttp3.OkHttpClient;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.client.BufferingClientHttpRequestFactory;import org.springframework.http.client.ClientHttpRequestFactory;import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;import org.springframework.http.converter.StringHttpMessageConverter;import org.springframework.web.client.RestTemplate;import java.nio.charset.StandardCharsets;import java.util.concurrent.TimeUnit;import static java.util.concurrent.TimeUnit.MILLISECONDS;@Configurationpublic class RestTemplateConfig {    private static final int TIME_OUT = 30 * 1000;    public static final String DEFAULT_REST_TEMPLATE = "restTemplate";    @Bean(name = "restTemplate")    public RestTemplate fpRestTemplate() {        RestTemplate restTemplate = new RestTemplate();        restTemplate.setErrorHandler(new CustomResponseErrorHandler());        OkHttpClient httpClient = new OkHttpClient.Builder()                //.sslSocketFactory(sslSocketFactory(), x509TrustManager())                .connectionPool(new ConnectionPool(600, 300, TimeUnit.SECONDS))                .connectTimeout(TIME_OUT, MILLISECONDS)                .readTimeout(TIME_OUT, MILLISECONDS)                .writeTimeout(TIME_OUT, MILLISECONDS)                .retryOnConnectionFailure(true)                .build();        ClientHttpRequestFactory factory = new OkHttp3ClientHttpRequestFactory(httpClient);        restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(factory));        restTemplate.getMessageConverters().add(0, new StringHttpMessageConverter(StandardCharsets.UTF_8));        return restTemplate;    }}